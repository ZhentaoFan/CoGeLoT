[tool.poetry]
name = "vima"
version = "1.0.0"
description = ""
authors = [
	"VIMA Team ",
	"Amit Parekh <7276308+amitkparekh@users.noreply.github.com>",
]
readme = "README.md"
license = "MIT"
classifiers = [
	"Development Status :: 5 - Production/Stable",
	"Topic :: Scientific/Engineering :: Artificial Intelligence",
	"Environment :: Console",
	"Programming Language :: Python :: 3.9",
]
packages = [{ include = "vima", from = "src" }]

[tool.poetry.dependencies]
python = "^3.11"
torch = "^2.0.1"
dm-tree = "*"
kornia = "*"
einops = "*"
tokenizers = "*"
transformers = "*"
omegaconf = "*"
numpy = "*"

[tool.poetry.group.lint.dependencies]
black = "*"
pre-commit = "*"
ruff = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 99
preview = true

[tool.ruff]
line-length = 99
ignore-init-module-imports = true
target-version = "py311"
src = ["src"]

# Enable every possible rule
# select = ["ALL"]

ignore = [
	# Allow function call as argument default
	"B008",
	# Don't ask for docstring at top of module --- put it in the functions/classes
	"D100",
	# Do not check for docstring within __init__ method
	"D107",
	# Don't ask about line length, Black recommends using bugbear B950 instead
	"E501",
	# Disable because this project uses jaxtyping (https://github.com/google/jaxtyping/blob/main/FAQ.md#flake8-is-throwing-an-error)
	"F722",
	# Allow import to be uppercase, because torch.nn.functional as F
	"N812",
	# Do not enforce annotations for self, cls, or similar
	"ANN1",
	# Do not block using 'Any' type since it happens
	"ANN401",
	# Let Black handle commas
	"COM",
	# Let logging use f-strings
	"G004",
	# Disable 'flake8-errmsg' because we assume users of this project can read tracebacks
	"EM",
	# We don't need to care about creating separate exception classes for every single type of error
	"TRY003",
	# Allow assigning variables before returning them
	"RET504",
	# Don't care about requiring an author name or issue link for a todo
	"TD002",
	"TD003",
]

unfixable = [
	# Do not remove unused imports
	"F401",
	# Do not remove unused variables
	"F841",
	# Do not auto-remove commented out code
	"ERA001",
]

[tool.ruff.pylint]
max-args = 20

[tool.ruff.flake8-quotes]
inline-quotes = "double"

[tool.ruff.mccabe]
max-complexity = 18

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.isort]
combine-as-imports = true
lines-after-imports = 2
required-imports = ["from __future__ import annotations"]
known-first-party = ["vima"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-type-checking]
exempt-modules = ["typing", "typing_extensions"]
runtime-evaluated-base-classes = [
	"pydantic.BaseModel",
	"pydantic.generics.GenericModel",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["D", "F401", "S101"]
"src/**/__init__.py" = ["D", "F401", "I002"]

[tool.pyright]
typeCheckingMode = "off"
