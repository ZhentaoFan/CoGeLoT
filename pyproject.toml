[project]
name = "cogelot"
version = "1.0.0"
description = ""
authors = [
    {name = "Amit Parekh", email = "7276308+amitkparekh@users.noreply.github.com"},
    {name = "VIMA Team"},
]
requires-python = ">=3.11,<3.13"
readme = "README.md"
license = {text = "MIT"}
dependencies = [
    "torch<3.0.0,>=2.0.0,!=2.0.1",
    "tokenizers>=0.13.3",
    "transformers>=4.32.0",
    "omegaconf>=2.3.0",
    "numpy>=1.25.2",
    "torchmetrics>=1.1.0",
    "loguru>=0.7.0",
    "tqdm>=4.66.1",
    "rich>=13.5.2",
    "pydantic>=2.3.0",
    "orjson>=3.9.5",
    "dill>=0.3.7",
    "hydra-core>=1.3.2",
    "typer>=0.9.0",
    "datasets>=2.14.4",
    "wandb>=0.15.8",
    "x-transformers==1.23.5",
    "pillow>=10.0.0",
    "opencv-python-headless>=4.8.0.76",
    "einops>=0.6.1",
    "pandas>=2.0.3",
    "pydantic-settings>=2.0.3",
    "pytorch-lightning>=2.0.9",
    "streamlit>=1.28.0",
    "hf-transfer>=0.1.4",
    "kornia>=0.7.0",
    "dm-tree>=0.1.8",
    "gym>=0.26.2",
    "pybullet>=3.2.5",
    "av>=10.0.0",
    "imageio>=2.31.1",
    "matplotlib>=3.7.2",
    "psutil>=5.9.5",
    "torchvision>=0.15.0",
    "importlib-resources>=6.0.1",
    "transforms3d>=0.4.1",
    "pyarrow<14",
]

[tool.pdm]
plugins = ["sync-pre-commit-lock"]

[tool.pdm.dev-dependencies]
test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-cases>=3.6.14",
    "pytest-xdist>=3.3.1",
    "hypothesis>=6.84.0",
]
lint = [
    "ruff>=0.0.285",
    "mypy>=1.5.1",
    "pre-commit>=3.3.3",
    "wemake-python-styleguide>=0.18.0",
    "flake8-pyproject>=1.2.3",
    "commitizen>=3.6.0",
    "toml-sort>=0.23.1",
    "docformatter>=1.7.5",
]

[tool.pdm.build]
package-dir = "src"

[tool.pdm.scripts]
pre_install = "pdm install --plugins"
format = "pre-commit run --all-files"

[tool.flake8]
select = ["WPS"]
extend-ignore = [
    # Disable the underscored numbers pattern (I don't like it)
    "WPS114",
    # Do not warn on too many imports.
    "WPS201",
    # Do not warn on too many module members
    "WPS202",
    # Do not warn when too many arguments in functions
    "WPS211",
    # Do not warn on too many methods
    "WPS214",
    # Allow lots of importing from the same module --- it can happen and thats okay!
    "WPS235",
    # Do not warn on complex f-string
    "WPS237",
    # Allow relative module references
    "WPS300",
    # Allow f-strings
    "WPS305",
    # Do not force base classes to inherit object
    "WPS306",
    # Defer to RUFF's SIM117 for this one
    "WPS316",
    # Allow multi-line type annotations
    "WPS320",
    # Do not flag implicit string concatenation since this is something Black does
    "WPS326",
    # Allow return statement that simply returns a prior statement
    "WPS331",
    # Allow new lines to start with a dot (caused by Black)
    "WPS348",
    # Allow logic in __init__ modules
    "WPS412",
    # Defer to other tools to find pointless lines
    "WPS428",
    # Defer to Ruff's PLR2004
    "WPS432",
    # Defer to Ruff's SLF001
    "WPS437",
    # Allow `float("nan")` because it's a thing that happens in ML stuff
    "WPS456",
    # Naming things is difficult, let the developer choose to use properties or methods
    "WPS615",
]
max-line-length = 99
max-line-complexity = 18
max-local-variables = 10
max-function-expressions = 10
max-module-expressions = 20
max-annotation-complexity = 4
max-name-length = 50
min-name-length = 1
max-methods = 9
max-string-usages = 10
show-violation-links = true
format = "wemake"
# Black enforces double quotes.
inline-quotes = "double"
docstring-convention = "google"
# Darglint
docstring_style = "google"
strictness = "long"
nested-classes-whitelist = ["Meta", "Params", "Config"]
allowed-domain-names = ["objects", "obj", "param"]
per-file-ignores = [
    "src/*/_version.py:WPS410",
    "src/**/__init__.py:WPS436",
    "src/*/__main__.py:WPS404",
    "src/*/commands/*:WPS404",
    "tests/*:WPS118,WPS202,WPS204,WPS210,WPS214,WPS218,WPS226,WPS231,WPS232,WPS235,WPS301,WPS404,WPS407,WPS432,WPS437,WPS442",
]
extend-exclude = [
    ".venv/",
    "*_cache/",
    ".cache/",
    "storage/",
    "src/vima",
    'scripts/example.py',
]

[tool.mypy]
python_version = 3.11
exclude = [
    '^src\/vima',
    '^src\/vima_bench',
    '^src\/vimasim',
    '^scripts\/example.py',
    '^tests',
]
# Import discovery
namespace_packages = true
ignore_missing_imports = true
# Dynamic typing
disallow_any_generics = true
disallow_any_explicit = false # Because sometimes it's just too complicated :/
disallow_any_decorated = false
disallow_subclassing_any = true
# Untyped definitions and calls
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_calls = false # We can't control all of these :(
disallow_untyped_decorators = false
disallow_untyped_defs = true
# None and Optional handling
no_implicit_optional = true
# Warnings
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true
# Config error messages
pretty = false
show_error_context = true
show_error_codes = true
show_column_numbers = true
plugins = "pydantic.mypy,numpy.typing.mypy_plugin"

[tool.pyright]
ignore = [
    "src/vima/**",
    "src/vima_bench/**",
    "src/vimasim/**",
    "scripts/example.py",
]
typeCheckingMode = "basic"
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
reportImportCycles = true
reportPropertyTypeMismatch = true
reportFunctionMemberAccess = "warning"
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
# Report private usage is covered by ruff
reportPrivateUsage = false
reportIncompatibleMethodOverride = "none"
reportUnnecessaryIsInstance = true
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportUnnecessaryContains = true
reportImplicitStringConcatenation = false
reportUnusedExpression = "warning"
reportShadowedImports = "error"

[tool.pytest.ini_options]
# addopts = "--jaxtyping-packages=cogelot,beartype.beartype"
testpaths = ["tests"]

[tool.ruff]
line-length = 99
ignore-init-module-imports = true
unsafe-fixes = true
target-version = "py311"
src = ["src"]
external = [
    "WPS",
    "WPS110",
    "WPS118",
    "WPS210",
    "WPS213",
    "WPS221",
    "WPS362",
    "WPS428",
    "WPS436",
    "WPS601",
]
# Enable every possible rule
select = ["ALL"]
ignore = [
    # Allow function call as argument default
    "B008",
    # Don't ask for docstring at top of module --- put it in the functions/classes
    "D100",
    # Do not check for docstring within __init__ method
    "D107",
    # Don't ask about line length, Black recommends using bugbear B950 instead
    "E501",
    # Disable because this project uses jaxtyping (https://github.com/google/jaxtyping/blob/main/FAQ.md#flake8-is-throwing-an-error)
    "F722",
    # Allow import to be uppercase, because torch.nn.functional as F
    "N812",
    # Allow asserts to be used because they're just convenient for type-narrowing. Type-narrowing
    # is more important than the possibility that someone is running python with -O (in optimized
    # mode).
    # https://stackoverflow.com/a/68429294
    "S101",
    # Do not enforce annotations for self, cls, or similar
    "ANN1",
    # Do not block using 'Any' type since it happens
    "ANN401",
    # Let Black handle commas
    "COM",
    # Let logging use f-strings
    "G004",
    # Disable 'flake8-errmsg' because we assume users of this project can read tracebacks
    "EM",
    # Allow TODO comments
    "FIX002",
    # We don't need to care about creating separate exception classes for every single type of
    # error
    "TRY003",
    # Allow assigning variables before returning them
    "RET504",
    # Don't care about requiring an author name or issue link for a todo
    "TD002",
    "TD003",
    # Disable flagging commented-out code because it's false-positives on shape comments
    "ERA001",
    # Things to ignore because ruff's formatter says so
    "D206",
    "ISC001",
    "Q000",
    "Q001",
    "Q002",
    "Q003",
    "W191",
]
unfixable = [
    # Do not remove unused variables
    "F841",
    # Do not auto-remove commented out code
    "ERA001",
]

[tool.ruff.flake8-quotes]
inline-quotes = "double"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-type-checking]
exempt-modules = ["typing", "typing_extensions", "pydantic_numpy"]
runtime-evaluated-base-classes = [
    "pydantic.BaseModel",
    "pydantic.generics.GenericModel",
]

[tool.ruff.isort]
combine-as-imports = true
known-first-party = ["vima", "cogelot", "vima_bench"]

[tool.ruff.mccabe]
max-complexity = 18

[tool.ruff.per-file-ignores]
"tests/*" = ["D", "S101", "INP001", "PLR2004"]
"scripts/*" = ["INP001"]
"src/**/__init__.py" = ["D", "F401", "I002"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.pylint]
max-args = 20

[tool.sync-pre-commit-lock.dependency-mapping]
toml-sort = {"repo" = "https://github.com/pappasam/toml-sort", "rev" = "v${rev}"}
docformatter = {"repo" = "https://github.com/PyCQA/docformatter", "rev" = "v${rev}"}

[tool.tomlsort]
sort_first = ["project", "tool"]
spaces_indent_inline_array = 4 # Matching editorconfig
trailing_comma_inline_array = true
overrides."project".first = [
    "name",
    "version",
    "description",
    "authors",
    "license",
    "readme",
    "requires-python",
]
overrides."tool".first = ["pdm"]
overrides."tool.pdm".first = ["dev-dependencies"]

[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"
