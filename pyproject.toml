[tool.poetry]
name = "cogelot"
version = "1.0.0"
description = ""
authors = [
	"VIMA Team ",
	"Amit Parekh <7276308+amitkparekh@users.noreply.github.com>",
]
readme = "README.md"
license = "MIT"
packages = [
	{ include = "vima", from = "src" },
	{ include = "cogelot", from = "src" },
]

[tool.poetry.dependencies]
python = "~3.11"
torch = "^2.0.1"
lightning = "^2"
dm-tree = "*"
kornia = "*"
einops = "*"
tokenizers = "*"
transformers = "*"
omegaconf = "*"
numpy = "*"
torchmetrics = "*"
pandas = "*"
loguru = "*"
tqdm = "*"
rich = "*"
thinc = "*"
pydantic = "*"
opencv-python = "*"
jaxtyping = "*"
beartype = "*"
orjson = "*"
torchdata = "*"
pydantic-numpy = "*"

[tool.poetry.group.lint.dependencies]
black = "*"
pre-commit = "*"
ruff = "*"
mypy = "*"
wemake-python-styleguide = "*"
flake8-pyproject = "*"

[tool.poetry.group.test.dependencies]
pytest = "*"
pytest-cases = "*"
pytest-xdist = "*"
pytest-cov = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 99
preview = true

[tool.ruff]
line-length = 99
ignore-init-module-imports = true
target-version = "py311"
src = ["src"]

external = ["WPS", "WPS*", "WPS110", "WPS221", "WPS428"]

# Enable every possible rule
# select = ["ALL"]

ignore = [
	# Allow function call as argument default
	"B008",
	# Don't ask for docstring at top of module --- put it in the functions/classes
	"D100",
	# Do not check for docstring within __init__ method
	"D107",
	# Don't ask about line length, Black recommends using bugbear B950 instead
	"E501",
	# Disable because this project uses jaxtyping (https://github.com/google/jaxtyping/blob/main/FAQ.md#flake8-is-throwing-an-error)
	"F722",
	# Allow import to be uppercase, because torch.nn.functional as F
	"N812",
	# Do not enforce annotations for self, cls, or similar
	"ANN1",
	# Do not block using 'Any' type since it happens
	"ANN401",
	# Let Black handle commas
	"COM",
	# Let logging use f-strings
	"G004",
	# Disable 'flake8-errmsg' because we assume users of this project can read tracebacks
	"EM",
	# We don't need to care about creating separate exception classes for every single type of error
	"TRY003",
	# Allow assigning variables before returning them
	"RET504",
	# Don't care about requiring an author name or issue link for a todo
	"TD002",
	"TD003",
	# Disable flagging commented-out code because it's false-positives on shape comments
	"ERA001",
]

unfixable = [
	# Do not remove unused imports
	# "F401",
	# Do not remove unused variables
	"F841",
	# Do not auto-remove commented out code
	"ERA001",
]

[tool.ruff.pylint]
max-args = 20

[tool.ruff.flake8-quotes]
inline-quotes = "double"

[tool.ruff.mccabe]
max-complexity = 18

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.isort]
combine-as-imports = true
lines-after-imports = 2
required-imports = ["from __future__ import annotations"]
known-first-party = ["vima", "cogelot"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.flake8-type-checking]
exempt-modules = ["typing", "typing_extensions", "pydantic_numpy"]
runtime-evaluated-base-classes = [
	"pydantic.BaseModel",
	"pydantic.generics.GenericModel",
]

[tool.ruff.per-file-ignores]
"tests/*" = ["D", "F401", "S101"]
"src/**/__init__.py" = ["D", "F401", "I002"]

[tool.pyright]
ignore = ["src/vima/**", "scripts/example.py"]

typeCheckingMode = "basic"
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
reportImportCycles = true
reportPropertyTypeMismatch = true
reportFunctionMemberAccess = "warning"
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportPrivateUsage = true
reportIncompatibleMethodOverride = true
reportUnnecessaryIsInstance = true
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportUnnecessaryContains = true
reportImplicitStringConcatenation = false
reportUnusedExpression = "warning"
reportShadowedImports = "error"

[tool.mypy]
python_version = 3.11
exclude = ["configs", "docs", "logs", "storage"]

# Import discovery
namespace_packages = true
ignore_missing_imports = true

# Dynamic typing
disallow_any_generics = true
disallow_any_explicit = false   # Because sometimes it's just too complicated :/
disallow_any_decorated = false
disallow_subclassing_any = true

# Untyped definitions and calls
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_calls = false      # We can't control all of these :(
disallow_untyped_decorators = false
disallow_untyped_defs = true

# None and Optional handling
no_implicit_optional = true

# Warnings
warn_no_return = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

# Config error messages
pretty = false
show_error_context = true
show_error_codes = true
show_column_numbers = true

plugins = "pydantic.mypy,numpy.typing.mypy_plugin,thinc.mypy"


[tool.flake8]
select = ["WPS"]

extend-ignore = [
	# Do not warn on too many imports.
	"WPS201",
	# Do not warn on too many module members
	"WPS202",
	# Do not warn when too many arguments in functions
	"WPS211",
	# Do not warn on too many methods
	"WPS214",
	# Allow lots of importing from the same module --- it can happen and thats okay!
	"WPS235",
	# Do not warn on complex f-string
	"WPS237",
	# Allow relative module references
	"WPS300",
	# Allow f-strings
	"WPS305",
	# Do not force base classes to inherit object
	"WPS306",
	# Defer to RUFF's SIM117 for this one
	"WPS316",
	# Do not flag implicit string concatenation since this is something Black does
	"WPS326",
	# Allow return statement that simply returns a prior statement
	"WPS331",
	# Allow new lines to start with a dot (caused by Black)
	"WPS348",
	# Allow logic in __init__ modules
	"WPS412",
	# Naming things is difficult, let the developer choose to use properties or methods
	"WPS615",
]

max-line-length = 99
max-line-complexity = 15
max-local-variables = 10
max-function-expressions = 10
max-module-expressions = 20
max-annotation-complexity = 4
min-name-length = 1
max-methods = 9
max-string-usages = 10
show-violation-links = true
format = "wemake"

# Black enforces double quotes.
inline-quotes = "double"

docstring-convention = "google"

# Darglint
docstring_style = "google"
strictness = "long"

nested-classes-whitelist = ["Meta", "Params", "Config"]

allowed-domain-names = ["objects", "obj"]

per-file-ignores = [
	"src/*/_version.py:WPS410",
	"src/**/__init__.py:WPS436",
	"src/*/__main__.py:WPS404",
	"src/*/commands/*:WPS404",
	"tests/*:WPS118,WPS202,WPS204,WPS210,WPS214,WPS218,WPS226,WPS231,WPS232,WPS235,WPS301,WPS404,WPS407,WPS432,WPS437,WPS442",
]

extend-exclude = [
	".venv/",
	"*_cache/",
	".cache/",
	"storage/",
	"src/vima",
	'scripts/example.py',
]
